1. ANAGRAM:
def check_anagram(data1,data2):
    #start writing your code here
    data1=data1.lower()
    data2=data2.lower()
    ans=[]
    if len(data1)==len(data2):
        for i in range(0,len(data1)):
            if data1[i] in data2 and data2[i] in data1 and data1[i]!=data2[i]:
                print(data1[i],data2[i])
                ans.append(1)
    if len(ans)==len(data1):
        return True
    else:
        return False
    
print(check_anagram("eat","tea"))

2. REMOVING DUPLICATES:
def remove_duplicates(value):
    #start writing your code here
    ans=""
    for i in value:
        if i not in ans:
            ans=ans+i
    return ans

print(remove_duplicates("11223445566666ababzzz@@@123#*#*"))

3. FINDING PERFECT NUMBER:
def check_perfect_number(number):
    #start writing your code here
    divisors=[]
    summ=0
    for i in range(1,number):
        if number%i==0:
            divisors.append(i)
    for i in divisors:
        summ+=i
    if summ==number:
        return True
    else:
        return False

def check_perfectno_from_list(no_list):
    #start writing your code here
    perfect_number=[]
    for i in range(len(no_list)):
        res=check_perfect_number(no_list[i])
        if (res):
            perfect_number.append(no_list[i])
        else:
            perfect_number=[]
    return perfect_number

perfectno_list=check_perfectno_from_list([87, 76, 567, 99, 0])
print(perfectno_list)


'''ticket_list=["AI567:MUM:LON:014","AI077:MUM:LON:056", "BA896:MUM:LON:067", "SI267:MUM:SIN:145","AI077:MUM:CAN:060","SI267:BLR:MUM:148","AI567:CHE:SIN:015","AI077:MUM:SIN:050","AI077:MUM:LON:051","SI267:MUM:SIN:146"]
4. FLIGHT PROBLEM:
def find_passengers_flight(airline_name="AI"):
    #This function finds and returns the number of passengers travelling in the specified airline.
    count=0
    for i in ticket_list:
        string_list=i.split(":")
        if(string_list[0].startswith(airline_name)):
            count+=1
    return count

def find_passengers_destination(destination):
    #Write the logic to find and return the number of passengers traveling to the specified destination
    count=0
    for i in ticket_list:
        string_list=i.split(":")
        if(string_list[2]==destination):
            count+=1
    return count
    #Remove pass and write your logic here

def find_passengers_per_flight():
    Write the logic to find and return a list having number of passengers traveling per flight based on the details in the ticket_list
    In the list, details should be provided in the format:
    [flight_no:no_of_passengers, flight_no:no_of_passengers, etc.].
    ans=[]
    c=[]
    flight_no=[]
    count=0
    for i in ticket_list:
        string_list=i.split(":")
        if string_list[0] not in ans:
            ans.append(string_list[0])
    for i in ticket_list:
        string_list=i.split(":")
        flight_no.append(string_list[0])
    for i in flight_no:
        count=flight_no.count(i)
        if i not in c:
            c.append(i)
            c.append(count)
    
        
        
    #print(flight_no)
    #print(ans)
        
    #Remove pass and write your logic here

def sort_passenger_list():
    #Write the logic to sort the list returned from find_passengers_per_flight() function in the descending order of number of passengers
    res=find_passengers_per_flight()
    res.sort(reverse=True)
    return res
    #Remove pass and write your logic here

#Provide different values for airline_name and destination and test your program.
print(find_passengers_flight("AI"))
print(find_passengers_destination("LON"))
print(sort_passenger_list())


5. TO CHECK IF A NUMBER IS CIRCULAR PRIME: 
  def check_prime(number):
     #remove pass and write your logic here. if the number is prime return true, else return false
    if (number==1):
        return False
    elif (number==2):
        return True;
    else:
        for x in range(2,number):
            if(number % x==0):
                return False
        return True     
        
def rotations(num):
    rotate=[]
    count=0
    n=num
    while n>0:
        count+=1
        n//=10
    powTen = pow(10,count - 1)
    for i in range(count - 1):
        firstDigit = num // powTen
        left = (num * 10 + firstDigit - (firstDigit * powTen * 10))
        rotate.append(left)
        num = left
    #print(rotate)
    return rotate

def get_circular_prime_count(limit):
    #remove pass and write your logic here.It should return the count of circular prime numbers below the given limit.
    res=rotations(limit)
    flag=0
    ans=[]
    for i in res:
        flag=check_prime(i)
        if (flag):
            ans.append(i)
    return ans

#Provide different values for limit and test your program
print(get_circular_prime_count(179))

6. VALIDATING PHONE_NO, NAME AND EMAIL:
import re

def validate_name(name):
    #Start writing your code here
    if name!='' and len(name)<=15:
        if name.isalpha():
            return True
        else:
            return False
    else:
        return False

def validate_phone_no(phno):
    #Start writing your code here
    check=[]
    j=0
    if len(phno)==10 and phno.isdigit():
        for i in range(1,len(phno)-1):
            if phno[j]==phno[i]:
                check.append(1)
        #print(check)
        if len(check)!=(len(phno)-2):
            return True
        else:
            return False
    else:
        return False
            
            
        

def validate_email_id(email_id):
    #Start writing your code here
    regex = '^(\w|\.|\_|\-)+[@](\w|\_|\-|\.)+[.]\w{2,3}$'
    if(re.search(regex, email_id)):
        #print("Valid Email")
        return True
    else:
        #print("Invalid Email")
        return False

def validate_all(name,phone_no,email_id):
    n,p,e=0,0,0
    n=validate_name(name)
    if(n):
        n=1
    else:
       print("Invalid Name")
    phone=validate_phone_no(phone_no)
    if(phone):
        p=1
    else:
        print("Invalid phone number")
    email=validate_email_id(email_id)
    if (email):
        e=1
    else:
        print("Invalid email id")
    if n and p and e:
        print("All the details are valid")
    #Start writing your code here
    # Use the below given print statements to display appropriate messages
    # Also, do not modify them for verification to work
    #print("Invalid Name")
    #print("Invalid phone number")
    #print()
    #print("All the details are valid")


#Provide different values for name, phone_no and email_id and test your program
validate_all("Tina", "9994599998", "tina@yahoo.com")'''

7. VALIDATING CREDIT CARD NUMBER:

def validate_credit_card_number(card_number):
    n=16
    rem=0
    summ=0
    card_no=[]
    no=[]
    new_no=[]
    temp=card_number
    while temp>0:
        rem=temp%10
        card_no.append(rem)
        temp=temp//10
    #print(card_no)
    for i in range(0,n,2):
        j=card_no[i+1]
        no.append(j*2)
    #print(no)
    for i in no:
        temp=i
        if i>9:
            while temp>0:
                rem=temp%10
                summ+=rem
                temp//=10
            #print(i,summ)
            new_no.append(summ)
            summ=0
        else:
            new_no.append(i)
    #print(new_no)
    for i in new_no:
        summ+=i
    #print(summ)
    for i in range(0,n,2):
        j=card_no[i]
        summ+=j
    if summ%10==0:
        return True
    else:
        return False
    
    
    #start writing your code herehttps://www.onlinegdb.com/#tab-stdin

card_number= 1456734512345698 #4539869650133101  #1456734512345698 # #5239512608615007
result=validate_credit_card_number(card_number)
if(result):
    print("credit card number is valid")
else:
    print("credit card number is invalid")

